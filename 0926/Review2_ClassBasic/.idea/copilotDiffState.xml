<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Account.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Account.java" />
              <option name="originalContent" value="// 帳戶類別，包含基本存提款功能&#10;public class Account {&#10;    private double balance; // 帳戶餘額&#10;    private String accountNumber; // 帳戶號碼&#10;    /**&#10;     * 建構子，初始化帳戶號碼與餘額&#10;     * @param accountNumber 帳戶號碼&#10;     * @param initialBalance 初始餘額&#10;     */&#10;    public Account(String accountNumber, double initialBalance) {&#10;//        this.accountNumber = accountNumber;&#10;//        this.balance = initialBalance;&#10;        this.setAccountNumber(accountNumber);&#10;        try {&#10;            this.setBalance(initialBalance);&#10;        } catch (IllegalArgumentException e) {&#10;            System.out.println(&quot;初始化餘額錯誤：&quot; + e.getMessage());&#10;            this.balance = 0; // 若初始餘額無效，設為零&#10;        }&#10;    }&#10;&#10;&#10;&#10;    /**&#10;     * 取得帳戶號碼&#10;     * @return 帳戶號碼&#10;     */&#10;    public String getAccountNumber() {&#10;        return accountNumber;&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶餘額&#10;     * @return 帳戶餘額&#10;     */&#10;    public double getBalance() {&#10;        return balance;&#10;    }&#10;&#10;    /**&#10;     * 設定帳戶餘額，金額必須大於等於零，錯誤可重試三次&#10;     * @param amount 欲設定的餘額&#10;     * @throws IllegalArgumentException 金額不合法且三次皆錯誤時丟出&#10;     */&#10;    public void setBalance(double amount) {&#10;        int attempts = 0;&#10;        while (attempts &lt; 3) {&#10;            if (amount &gt;= 0) {&#10;                this.balance = amount;&#10;                return;&#10;            } else {&#10;                attempts++;&#10;                if (attempts &lt; 3) {&#10;                    System.out.println(&quot;餘額必須大於等於零，請重新輸入：&quot;);&#10;                    java.util.Scanner scanner = new java.util.Scanner(System.in);&#10;                    amount = scanner.nextDouble();&#10;                } else {&#10;                    throw new IllegalArgumentException(&quot;餘額必須大於等於零。三次皆錯誤！&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 存款，金額必須大於零，錯誤可重試三次&#10;     * @param amount 存款金額&#10;     * @throws IllegalArgumentException 金額不合法且三次皆錯誤時丟出&#10;     */&#10;    public void deposit(double amount) {&#10;        int attempts = 0;&#10;        while (attempts &lt; 3) {&#10;            if (amount &gt; 0) {&#10;                balance += amount;&#10;                return;&#10;            } else {&#10;                attempts++;&#10;                if (attempts &lt; 3) {&#10;                    System.out.println(&quot;存款金額必須大於零，請重新輸入：&quot;);&#10;                    java.util.Scanner scanner = new java.util.Scanner(System.in);&#10;                    amount = scanner.nextDouble();&#10;                } else {&#10;                    throw new IllegalArgumentException(&quot;存款金額必須大於零。三次皆錯誤！&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 提款，金額必須大於零且不超過餘額，錯誤可重試三次&#10;     * @param amount 提款金額&#10;     * @throws IllegalArgumentException 金額不合法且三次皆錯誤時丟出&#10;     */&#10;    public void withdraw(double amount) {&#10;        int attempts = 0;&#10;        while (attempts &lt; 3) {&#10;            if (amount &gt; 0 &amp;&amp; amount &lt;= balance) {&#10;                balance -= amount;&#10;                return;&#10;            } else {&#10;                attempts++;&#10;                if (attempts &lt; 3) {&#10;                    System.out.println(&quot;提款金額必須大於零且不超過餘額，請重新輸入：&quot;);&#10;                    java.util.Scanner scanner = new java.util.Scanner(System.in);&#10;                    amount = scanner.nextDouble();&#10;                } else {&#10;                    throw new IllegalArgumentException(&quot;提款金額無效或超過餘額。三次皆錯誤！&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// 帳戶類別，包含基本存提款功能&#10;public class Account {&#10;    private double balance; // 帳戶餘額&#10;    private String accountNumber; // 帳戶號碼&#10;    /**&#10;     * 建構子，初始化帳戶號碼與餘額&#10;     * @param accountNumber 帳戶號碼&#10;     * @param initialBalance 初始餘額&#10;     */&#10;    public Account(String accountNumber, double initialBalance) {&#10;//        this.accountNumber = accountNumber;&#10;//        this.balance = initialBalance;&#10;        this.setAccountNumber(accountNumber);&#10;        try {&#10;            this.setBalance(initialBalance);&#10;        } catch (IllegalArgumentException e) {&#10;            System.out.println(&quot;初始化餘額錯誤：&quot; + e.getMessage());&#10;            this.balance = 0; // 若初始餘額無效，設為零&#10;        }&#10;    }&#10;&#10;&#10;&#10;    /**&#10;     * 取得帳戶號碼&#10;     * @return 帳戶號碼&#10;     */&#10;    public String getAccountNumber() {&#10;        return accountNumber;&#10;    }&#10;&#10;    /**&#10;     * 取得帳戶餘額&#10;     * @return 帳戶餘額&#10;     */&#10;    public double getBalance() {&#10;        return balance;&#10;    }&#10;&#10;    /**&#10;     * 設定帳戶號碼&#10;     * @param accountNumber 帳戶號碼&#10;     */&#10;    public void setAccountNumber(String accountNumber) {&#10;        this.accountNumber = accountNumber;&#10;    }&#10;&#10;    /**&#10;     * 設定帳戶餘額，金額必須大於等於零，錯誤可重試三次&#10;     * @param amount 欲設定的餘額&#10;     * @throws IllegalArgumentException 金額不合法且三次皆錯誤時丟出&#10;     */&#10;    public void setBalance(double amount) {&#10;        int attempts = 0;&#10;        while (attempts &lt; 3) {&#10;            if (amount &gt;= 0) {&#10;                this.balance = amount;&#10;                return;&#10;            } else {&#10;                attempts++;&#10;                if (attempts &lt; 3) {&#10;                    System.out.println(&quot;餘額必須大於等於零，請重新輸入：&quot;);&#10;                    java.util.Scanner scanner = new java.util.Scanner(System.in);&#10;                    amount = scanner.nextDouble();&#10;                } else {&#10;                    throw new IllegalArgumentException(&quot;餘額必須大於等於零。三次皆錯誤！&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 存款，金額必須大於零，錯誤可重試三次&#10;     * @param amount 存款金額&#10;     * @throws IllegalArgumentException 金額不合法且三次皆錯誤時丟出&#10;     */&#10;    public void deposit(double amount) {&#10;        int attempts = 0;&#10;        while (attempts &lt; 3) {&#10;            if (amount &gt; 0) {&#10;                balance += amount;&#10;                return;&#10;            } else {&#10;                attempts++;&#10;                if (attempts &lt; 3) {&#10;                    System.out.println(&quot;存款金額必須大於零，請重新輸入：&quot;);&#10;                    java.util.Scanner scanner = new java.util.Scanner(System.in);&#10;                    amount = scanner.nextDouble();&#10;                } else {&#10;                    throw new IllegalArgumentException(&quot;存款金額必須大於零。三次皆錯誤！&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 提款，金額必須大於零且不超過餘額，錯誤可重試三次&#10;     * @param amount 提款金額&#10;     * @throws IllegalArgumentException 金額不合法且三次皆錯誤時丟出&#10;     */&#10;    public void withdraw(double amount) {&#10;        int attempts = 0;&#10;        while (attempts &lt; 3) {&#10;            if (amount &gt; 0 &amp;&amp; amount &lt;= balance) {&#10;                balance -= amount;&#10;                return;&#10;            } else {&#10;                attempts++;&#10;                if (attempts &lt; 3) {&#10;                    System.out.println(&quot;提款金額必須大於零且不超過餘額，請重新輸入：&quot;);&#10;                    java.util.Scanner scanner = new java.util.Scanner(System.in);&#10;                    amount = scanner.nextDouble();&#10;                } else {&#10;                    throw new IllegalArgumentException(&quot;提款金額無效或超過餘額。三次皆錯誤！&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>